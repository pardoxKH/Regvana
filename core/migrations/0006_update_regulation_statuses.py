# Generated by Django 5.2 on 2025-04-11 19:50

from django.db import migrations

def update_regulation_statuses(apps, schema_editor):
    # Get the historical model
    Regulation = apps.get_model('core', 'Regulation')
    
    # Define status mapping from old to new
    status_mapping = {
        'draft': 'draft',  # Keep draft as is
        'pending': 'awaiting_compliance_review',  # Pending becomes awaiting review
        'in_progress': 'reviewed_by_compliance',  # In progress becomes reviewed
        'approved': 'fully_approved',  # Approved becomes fully approved
        'rejected': 'returned_for_department_rework',  # Rejected becomes returned for rework
    }
    
    # Update all regulations
    for regulation in Regulation.objects.all():
        if regulation.status in status_mapping:
            regulation.status = status_mapping[regulation.status]
            regulation.save()

def reverse_regulation_statuses(apps, schema_editor):
    # Get the historical model
    Regulation = apps.get_model('core', 'Regulation')
    
    # Define reverse status mapping from new to old
    reverse_status_mapping = {
        'draft': 'draft',
        'awaiting_compliance_review': 'pending',
        'reviewed_by_compliance': 'in_progress',
        'fully_approved': 'approved',
        'returned_for_department_rework': 'rejected',
        'action_required_from_department': 'pending',
        'department_response_submitted': 'in_progress',
        'awaiting_final_compliance_approval': 'pending'
    }
    
    # Reverse update all regulations
    for regulation in Regulation.objects.all():
        if regulation.status in reverse_status_mapping:
            regulation.status = reverse_status_mapping[regulation.status]
            regulation.save()

class Migration(migrations.Migration):

    dependencies = [
        ('core', '0005_regulation_type'),
    ]

    operations = [
        migrations.RunPython(update_regulation_statuses, reverse_regulation_statuses),
    ]
